name: Python Wheel (Windows)

on:
  push:
  release:
    types: ['released', 'prereleased']

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      name: Install Python
      with: 
        python-version: ${{ matrix.python-version }}
    - name: Cache Virtual Environment
      id: cache-venv
      uses: actions/cache@v2
      with:
        path: py-venv
        key: ${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('scripts/windows/install-gtest.ps1') }}-${{ hashFiles('scripts/windows/install-eigen.ps1') }}-${{ hashFiles('scripts/requirements-wheel.txt') }}-
    - name: Install Python Dependencies 
      if: steps.cache-venv.outputs.cache-hit != 'true'
      shell: powershell
      run: |
        python -m venv py-venv
        ./py-venv/Scripts/Activate.ps1
        pip install -r scripts/requirements-wheel.txt
        powershell scripts/windows/install-gtest.ps1
        powershell scripts/windows/install-eigen.ps1
      env:
        # CXXFLAGS: "/arch:AVX2 /bigobj"
        # CFLAGS: "/arch:AVX2 /bigobj"
        CXXFLAGS: "/bigobj"
        CFLAGS: "/bigobj"
    - name: Build
      shell: powershell
      run: |
        ./py-venv/Scripts/Activate.ps1
        python setup.py bdist_wheel --build-type RelWithDebInfo -j2
      env:
        # CXXFLAGS: "/arch:AVX2 /bigobj"
        # CFLAGS: "/arch:AVX2 /bigobj"
        CXXFLAGS: "/bigobj"
        CFLAGS: "/bigobj"
        PYTHONUTF8: 1
    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        name: quala-whl-${{ matrix.python-version }}
        path: dist/quala-*win*.whl

  # test:
  #   needs: build
  #   runs-on: windows-latest
  #   strategy:
  #     matrix:
  #       python-version: ['3.7', '3.8', '3.9', '3.10']
  #   steps:
  #   - uses: actions/checkout@v1
  #   - uses: actions/setup-python@v2
  #     name: Install Python
  #     with: 
  #       python-version: ${{ matrix.python-version }}
  #   - uses: actions/download-artifact@v2
  #     with:
  #       name: quala-whl-${{ matrix.python-version }}
  #       path: dist
  #   - name: 'Install quala'
  #     run: python -m pip install --find-links=dist quala
  #   - name: 'Run tests'
  #     run: python ./src/quala/test.py

  release:
    if: ${{ github.event.action == 'released' || github.event.action == 'prereleased' }}
    needs: build # test
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-python@v2
      name: Install Python
      with: 
        python-version: ${{ matrix.python-version }}
    - uses: actions/download-artifact@v2
      with:
        name: quala-whl-${{ matrix.python-version }}
        path: dist
    
    - name: 'Install quala'
      run: python -m pip install --find-links=dist quala
    - name: 'Check quala version'
      if: ${{ matrix.python-version != '3.7' }}
      run: |
        "${{ github.event.release.tag_name }}" -eq "$(python -c 'from importlib.metadata import version as v; print(v(\"quala\"))')"
      shell: powershell
    - name: 'Install Twine'
      run: python -m pip install twine
    - name: 'Upload Wheel to PyPi'
      run: python -m twine upload dist/quala-*.whl
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PyPI }}
